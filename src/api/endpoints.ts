/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import { HttpResponse, delay, http } from "msw";
export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface CoursesTakenBody {
  course_codes_taken: string[];
}

/**
 * @summary Read Root
 */
export const readRootGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.default.get(`/`, options);
};

export const getReadRootGetQueryKey = () => {
  return [`/`] as const;
};

export const getReadRootGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readRootGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof readRootGet>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReadRootGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof readRootGet>>> = ({
    signal,
  }) => readRootGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof readRootGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReadRootGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof readRootGet>>
>;
export type ReadRootGetQueryError = AxiosError<unknown>;

/**
 * @summary Read Root
 */
export const useReadRootGet = <
  TData = Awaited<ReturnType<typeof readRootGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof readRootGet>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getReadRootGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Read Item
 */
export const readItemQueryGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.default.get(`/query`, options);
};

export const getReadItemQueryGetQueryKey = () => {
  return [`/query`] as const;
};

export const getReadItemQueryGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readItemQueryGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof readItemQueryGet>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReadItemQueryGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof readItemQueryGet>>
  > = ({ signal }) => readItemQueryGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof readItemQueryGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReadItemQueryGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof readItemQueryGet>>
>;
export type ReadItemQueryGetQueryError = AxiosError<unknown>;

/**
 * @summary Read Item
 */
export const useReadItemQueryGet = <
  TData = Awaited<ReturnType<typeof readItemQueryGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof readItemQueryGet>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getReadItemQueryGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Top Courses
 */
export const getTopCoursesCoursesTopGet = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.default.get(`/courses/top`, options);
};

export const getGetTopCoursesCoursesTopGetQueryKey = () => {
  return [`/courses/top`] as const;
};

export const getGetTopCoursesCoursesTopGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getTopCoursesCoursesTopGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTopCoursesCoursesTopGet>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTopCoursesCoursesTopGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTopCoursesCoursesTopGet>>
  > = ({ signal }) => getTopCoursesCoursesTopGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTopCoursesCoursesTopGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTopCoursesCoursesTopGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTopCoursesCoursesTopGet>>
>;
export type GetTopCoursesCoursesTopGetQueryError = AxiosError<unknown>;

/**
 * @summary Get Top Courses
 */
export const useGetTopCoursesCoursesTopGet = <
  TData = Awaited<ReturnType<typeof getTopCoursesCoursesTopGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTopCoursesCoursesTopGet>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTopCoursesCoursesTopGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Can Take
 */
export const canTakeCanTakeCoursePost = (
  course: string,
  coursesTakenBody: CoursesTakenBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<unknown>> => {
  return axios.default.post(`/can-take/${course}`, coursesTakenBody, options);
};

export const getCanTakeCanTakeCoursePostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof canTakeCanTakeCoursePost>>,
    TError,
    { course: string; data: CoursesTakenBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof canTakeCanTakeCoursePost>>,
  TError,
  { course: string; data: CoursesTakenBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof canTakeCanTakeCoursePost>>,
    { course: string; data: CoursesTakenBody }
  > = (props) => {
    const { course, data } = props ?? {};

    return canTakeCanTakeCoursePost(course, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CanTakeCanTakeCoursePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof canTakeCanTakeCoursePost>>
>;
export type CanTakeCanTakeCoursePostMutationBody = CoursesTakenBody;
export type CanTakeCanTakeCoursePostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Can Take
 */
export const useCanTakeCanTakeCoursePost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof canTakeCanTakeCoursePost>>,
    TError,
    { course: string; data: CoursesTakenBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getCanTakeCanTakeCoursePostMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getFastAPIMock = () => [
  http.get("*/", async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  }),
  http.get("*/query", async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  }),
  http.get("*/courses/top", async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  }),
  http.post("*/can-take/:course", async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  }),
];
